name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src-tauri/tauri.conf.json'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even if version has not changed'
        type: boolean
        default: false

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      previous_version: ${{ steps.check.outputs.previous_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version changes
        id: check
        run: |
          git diff HEAD^ HEAD --name-only
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get previous commit's package.json version
          git checkout HEAD~1 package.json
          PREVIOUS_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD package.json
          
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Determine if we should create a release
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] || ${{ github.event.inputs.force_release == 'true' }}; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION or force_release is true"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version change detected"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.check-version.outputs.version }}
      should_build: true

  create-release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    # Add explicit permissions for creating releases
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Remove cache since we need to set up pnpm first

      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: true
          
      # Add caching after pnpm is available
      - name: Setup Node.js with PNPM cache
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifact directories
        run: |
          ls -la artifacts
          find artifacts -type d
          find artifacts -type f

      - name: Generate update JSON
        run: |
          mkdir -p release-assets
          
          # Debug: Show what artifacts we have
          echo "Contents of artifacts directory:"
          find artifacts -type f -name "*.dmg" | sort
          
          # Copy DMG files from artifacts directory
          find artifacts -type f -name "*.dmg" -exec cp {} release-assets/ \;
          
          # List the actual files to verify the names
          echo "Files in release-assets directory:"
          ls -la release-assets/
          
          # Generate latest.json 
          node ./scripts/generate-update-json.js
          cp latest.json release-assets/

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Circle Camera v${{ needs.check-version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # Circle Camera ${{ needs.check-version.outputs.version }}
            
            Automated release from version ${{ needs.check-version.outputs.previous_version }} to ${{ needs.check-version.outputs.version }}
            
            ## Platform Support
            
            Circle Camera is officially supported on macOS only (both Intel and Apple Silicon).
            Windows is not officially supported at this time.
            
            ## How to Test This Release
            
            1. Download the appropriate installer for your platform
            2. Install the application
            3. Verify that the app works as expected
            4. Test the automatic update system
            
            ## Changelog
            
            *Please add your changelog here before publishing the release*

      - name: Find macOS Apple Silicon artifact
        id: find_aarch64
        run: |
          AARCH64_DMG=$(find artifacts -type f -name "*aarch64.dmg" | head -n 1)
          echo "Found Apple Silicon DMG: $AARCH64_DMG"
          echo "path=$AARCH64_DMG" >> $GITHUB_OUTPUT
          echo "filename=$(basename $AARCH64_DMG)" >> $GITHUB_OUTPUT

      - name: Find macOS Intel artifact
        id: find_x64
        run: |
          X64_DMG=$(find artifacts -type f -name "*x64.dmg" | head -n 1)
          echo "Found Intel DMG: $X64_DMG" 
          echo "path=$X64_DMG" >> $GITHUB_OUTPUT
          echo "filename=$(basename $X64_DMG)" >> $GITHUB_OUTPUT

      - name: Upload macOS Apple Silicon Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_aarch64.outputs.path }}
          asset_name: ${{ steps.find_aarch64.outputs.filename }}
          asset_content_type: application/octet-stream

      - name: Upload macOS Intel Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_x64.outputs.path }}
          asset_name: ${{ steps.find_x64.outputs.filename }}
          asset_content_type: application/octet-stream

      - name: Upload latest.json Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/latest.json
          asset_name: latest.json
          asset_content_type: application/json