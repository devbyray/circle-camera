name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'src-tauri/tauri.conf.json'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even if version has not changed'
        type: boolean
        default: false

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
      previous_version: ${{ steps.check.outputs.previous_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version changes
        id: check
        run: |
          git diff HEAD^ HEAD --name-only
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get previous commit's package.json version
          git checkout HEAD~1 package.json
          PREVIOUS_VERSION=$(node -p "require('./package.json').version")
          git checkout HEAD package.json
          
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Determine if we should create a release
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] || ${{ github.event.inputs.force_release == 'true' }}; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION or force_release is true"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version change detected"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.check-version.outputs.version }}
      should_build: true
      validate_only: false

  create-release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: true
          
      - name: Setup Node.js with PNPM cache
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Create release assets directory
        run: mkdir -p release-assets

      - name: Download Apple Silicon artifact
        uses: actions/download-artifact@v4
        with:
          name: circle-camera-macos-aarch64
          path: release-assets/aarch64

      - name: Download Intel artifact
        uses: actions/download-artifact@v4
        with:
          name: circle-camera-macos-x64
          path: release-assets/x64
          
      - name: Verify downloaded artifacts
        id: verify_artifacts
        run: |
          echo "Listing downloaded artifacts:"
          ls -la release-assets/aarch64 || echo "No aarch64 directory"
          ls -la release-assets/x64 || echo "No x64 directory"
          
          # Find Apple Silicon DMG
          AARCH64_DMG=$(find release-assets/aarch64 -name "*.dmg" | head -n 1)
          
          # Find Intel DMG
          X64_DMG=$(find release-assets/x64 -name "*.dmg" | head -n 1)
          
          # Check file sizes to ensure they are not empty or corrupted
          if [ -n "$AARCH64_DMG" ]; then
            SIZE=$(stat -c%s "$AARCH64_DMG" 2>/dev/null || stat -f%z "$AARCH64_DMG")
            echo "Apple Silicon DMG size: $SIZE bytes"
            if [ "$SIZE" -lt 1000000 ]; then
              echo "WARNING: Apple Silicon DMG file is suspiciously small!"
            fi
            echo "aarch64_dmg=$AARCH64_DMG" >> $GITHUB_OUTPUT
            echo "aarch64_filename=$(basename $AARCH64_DMG)" >> $GITHUB_OUTPUT
            echo "aarch64_valid=true" >> $GITHUB_OUTPUT
          else
            echo "No Apple Silicon DMG found!"
            echo "aarch64_valid=false" >> $GITHUB_OUTPUT
          fi
          
          if [ -n "$X64_DMG" ]; then
            SIZE=$(stat -c%s "$X64_DMG" 2>/dev/null || stat -f%z "$X64_DMG")
            echo "Intel DMG size: $SIZE bytes"
            if [ "$SIZE" -lt 1000000 ]; then
              echo "WARNING: Intel DMG file is suspiciously small!"
            fi
            echo "x64_dmg=$X64_DMG" >> $GITHUB_OUTPUT
            echo "x64_filename=$(basename $X64_DMG)" >> $GITHUB_OUTPUT
            echo "x64_valid=true" >> $GITHUB_OUTPUT
          else
            echo "No Intel DMG found, continuing without it."
            echo "x64_valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Make copies with explicit file mode permissions
          if [ -n "$AARCH64_DMG" ]; then
            cp -p "$AARCH64_DMG" release-assets/
            chmod 644 "release-assets/$(basename $AARCH64_DMG)"
            echo "Copied to release-assets/$(basename $AARCH64_DMG) with permissions 644"
          fi
          
          if [ -n "$X64_DMG" ]; then
            cp -p "$X64_DMG" release-assets/
            chmod 644 "release-assets/$(basename $X64_DMG)"
            echo "Copied to release-assets/$(basename $X64_DMG) with permissions 644"
          fi

      - name: Generate update JSON
        run: |
          # Generate latest.json 
          node ./scripts/generate-update-json.js
          cp latest.json release-assets/

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Circle Camera v${{ needs.check-version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # Circle Camera ${{ needs.check-version.outputs.version }}
            
            Automated release from version ${{ needs.check-version.outputs.previous_version }} to ${{ needs.check-version.outputs.version }}
            
            ## Platform Support
            
            Circle Camera is officially supported on macOS only (both Intel and Apple Silicon).
            Windows is not officially supported at this time.
            
            ## How to Test This Release
            
            1. Download the appropriate installer for your platform
            2. Install the application
            3. Verify that the app works as expected
            4. Test the automatic update system
            
            ## Changelog
            
            *Please add your changelog here before publishing the release*

      - name: Upload macOS Apple Silicon DMG
        if: steps.verify_artifacts.outputs.aarch64_valid == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "release-assets/$(basename ${{ steps.verify_artifacts.outputs.aarch64_dmg }})"
          asset_name: ${{ steps.verify_artifacts.outputs.aarch64_filename }}
          asset_content_type: application/x-apple-diskimage

      - name: Upload macOS Intel DMG
        if: steps.verify_artifacts.outputs.x64_valid == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "release-assets/$(basename ${{ steps.verify_artifacts.outputs.x64_dmg }})"
          asset_name: ${{ steps.verify_artifacts.outputs.x64_filename }}
          asset_content_type: application/x-apple-diskimage

      - name: Upload latest.json Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/latest.json
          asset_name: latest.json
          asset_content_type: application/json